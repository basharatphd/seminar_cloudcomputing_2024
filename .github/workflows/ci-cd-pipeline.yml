name: Student App Deploying to Amazon ECR and EKS cluster

on:
  workflow_dispatch:
    inputs:
      mfa_token:
        description: "MFA Token"
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_WEB: #repo-name
  EKS_CLUSTER: #clustername

permissions:
  id-token: write
  contents: write

jobs:
  checkout-instal-ctl-build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from file
        id: read-version
        run: |
          APP_VERSION=$(grep 'app_version=' version.txt | cut -d'=' -f2)


          # Export the versions as environment variables
          echo "APP_TAG=${APP_VERSION}" >> $GITHUB_ENV

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"
        id: install-kubectl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Debug MFA Token
        run: echo ${{ github.event.inputs.mfa_token }}

      - name: Assume role and set AWS credentials
        id: assume_role
        run: |
          SESSION=$(aws sts assume-role \
            --role-arn arn:aws:iam::# \
            --serial-number arn:aws:iam::# \
            --token-code ${{ github.event.inputs.mfa_token }} \
            --role-session-name test \
            --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
            --output text)

          if [ -z "$SESSION" ]; then
            echo "Failed to assume role"
            exit 1
          else
            echo "AWS_ACCESS_KEY_ID=$(echo $SESSION | cut -d' ' -f1)" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=$(echo $SESSION | cut -d' ' -f2)" >> $GITHUB_ENV
            echo "AWS_SESSION_TOKEN=$(echo $SESSION | cut -d' ' -f3)" >> $GITHUB_ENV
          fi

      - name: Configure AWS Credentials with Assumed Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push app image to Amazon ECR
        id: build-image-app
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.APP_TAG }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG

     

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG_APP: ${{ env.APP_TAG }}

        run: |
          # Define image variables
          APP_IMAGE="$ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG_APP"

          # Export the images as environment variables
          echo "APP_IMAGE=${APP_IMAGE}" >> $GITHUB_ENV

          export AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }}
          export AWS_SESSION_TOKEN=${{ env.AWS_SESSION_TOKEN }}

          aws eks update-kubeconfig --name $EKS_CLUSTER --region $AWS_REGION

          kubectl set image deployments/student-app student-app=$APP_IMAGE
